#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
import sys, select, tty, termios
import time
#tty and termious are linux operations


""""
#initialize velocities and step size [linear, angular]
burger_vel_max = [.22,2.84]
waffle_lin_max = [.26, 1.78]
"""
twist = Twist() #twist variable for publhing to cmd_vel topic
#twist.linear.x will be our linear velocity outut
#twist.angular.z will be our angular velocity output
twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

linInc = .01 #linear velocity step size
angInc=.1 #angular velocity step size


#assign correct velocity max based on model
# rospy.get_param('foo', 'default_value')    <- syntax
myModel = rospy.get_param('model', 'waffle')
if myModel == 'burger':
    linMax = .22
    angMax = 2.84
elif myModel == 'waffle':
    linMax = .26
    angMax = 1.78
else:
    sys.exit('There was an invalid model input')

#messages to user
msg = """

              W           Forward
           A  S  D   Left, Backwards, Right
              X            Stop

              Try not to crash!!!
              """
exit = """

        Ending controll transmition
        """

#gets key input from the user command line
def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ =select.select([sys.stdin], [], [], .01)
    if rlist:
        newKey = sys.stdin.read(1)
    else:
        key = ''
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return newKey #for testing newVelocity

#Makes sure velocity steps are in bounds
#keypad used to control precise turning
def newVelocity (key):
    newTwist = Twist() #new twist variable for  assigning new velocity vector
    newTwist.linear.x = twist.linear.x; newTwist.linear.y = 0; newTwist.linear.z = 0;
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=0;
    if (key=='w' and twist.linear.x < linMax):
        newTwist.linear.x = twist.linear.x + linInc #increase forwad speed
    if (key=='s' and twist.linear.x > -linMax):
        newTwist.linear.x = newTwist.linear.x - linInc
    if (key=='a' and twist.angular.z < angMax):
        newTwist.angular.z = newTwist.angular.z + angInc
    if (key=='d' and twist.angular > -angMax):
        newTwist.angular.z = newTwist.angular.z - angInc
    if (key=='x'): # x -> STOP
        twist.linear.x = 0.0
        twist.angular.z = 0.0
    #keys to instantly set velocity as desired [all fullspeed]
    if (key == '9'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=-angMax;
    if (key == '8'):
        newTwist.linear.x = linMax; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=0;
    if (key == '7'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=angMax;
    if (key == '6'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=-angMax;
    if (key == '4'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=angMax;
    if (key == '3'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=-angMax;
    if (key == '2'):
        newTwist.linear.x = -linMax; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=0;
    if (key == '1'):
        newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0;
        newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z=angMax;

    return newTwist

#returns amount of cycles a twist should be published for in order to turn to the desired angle
def turnTime(key, myRate):
    # returns time it takes to make the desired turn
    #       depending on key input at angMax velocity
    # [9,7,6,4,3,2] ->[45 clockwise, 45 counterclockwise, 90 clockwise, 90 counterclockwise, (reverse) 45 counterclockwise, (reverse) 45 clockwise]
    if (key == '7' or key == '9'):
        cycles = (.785398/angMax)*myRate
        #enough for a 45 (.785398 rads) degree turn based on angMax and myRate
    elif (key=='4' or key =='6'):
        cycles = (1.570796/angMax)*myRate
    elif (key == '1' or key == '3'):
        cycles = (.785398/angMax)*myRate*3
    return cycles

if __name__ == "__main__":
    #twist = Twist() #initialize twist variable for velocities
    rospy.init_node('myteleop_key', anonymous=True) #initialize node
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10) #initialize publisher
    vel = [0,0] #[linear, angular]
    myRate = 30
    rate = rospy.Rate(myRate)
    try:
        print(msg)
        i=0
        #while(1)
        key = '3'
        var = 0
        while(not rospy.is_shutdown()):
            # key = getKey() #receive input key from user
            twist = newVelocity(key) #will update velocity within bounds based on user input
            #twist.linear.x = .5*linMax #testing, broadacast 1/2 max speed constantly
            pub.publish(twist) #publish twist to topic cmd_vel
            print(key)
            #determine turn time for various key inputs:
            if ((key =='9' or key == '7' or key == '6' or key=='4' or key=='3' or key=='1') and var == 0):
                var =1
                i=0
                print('Im inside')
                turnSeconds= turnTime(key, myRate)
            elif((key =='9' or key == '7' or key == '6' or key=='4' or key=='3' or key=='1') and var!=0 and i>turnSeconds): # i>turnSeconds turn for for seconds
                print('Stoping rotation')
                key = 'x'
                var = 0
                i = 0
                #kevar                y='8'
                #var = 0
            else:
                pass
            i = i+1
            rate.sleep()

    except:            #i=i+1
        print(exit)
    finally:
        #twist velocities to 0 and publish
        pass




	#publshing twist messages of a que size 10 to cmd_vel
