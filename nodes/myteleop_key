#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
import sys, select, tty, termios
#tty and termious are linux operations


""""
#initialize velocities and step size [linear, angular]
burger_vel_max = [.22,2.84]
waffle_lin_max = [.26, 1.78]
"""
twist = Twist() #twist variable for publhing to cmd_vel topic
#twist.linear.x will be our linear velocity outut
#twist.angular.z will be our angular velocity output
twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

linInc = .01 #linear velocity step size
angInc=.1 #angular velocity step size


#assign correct velocity max based on model
# rospy.get_param('foo', 'default_value')    <- syntax
myModel = rospy.get_param('model', 'waffle')
if myModel == 'burger':
    linMax = .22
    angMax = 2.84
elif myModel == 'waffle':
    linMax = .26
    angMax = 1.78
else:
    sys.exit('There was an invalid model input')

#messages to user
msg = """

              W           Forward
           A  S  D   Left, Backwards, Right
              X            Stop

              Try not to crash!!!
              """
exit = """

        Ending controll transmition
        """
def getKey():
	pass


#make sure velocity steps are smooth and in bounds

def newVelocity (key):
    newTwist = Twist() #new twist variable for  assigning new velocity vector
    if (key==w and twist.linear.x < linMax):
        #increase forwad speed
        pass
    if (key==s and twist.linear.x > -linMax):
        #increase backwards speed
        pass
    if (key==a and twist.angular.z > -angMax):
        pass
    if (key==d and twist.angular < angMax):
        pass
    if (key==x): # x -> STOP
        twist.linear.x = 0.0
        twist.angular.z = 0.0
    return newTwist()


if __name__ == "__main__":
	twist = Twist() #initialize twist variable for velocities
	rospy.init_node('myteleop_key', anonymous=True) #initialize node
	pub = rospy.Publisher('cmd_vel', Twist, queue_size=10) #initialize publisher
	vel = [0,0] #[linear, angular]

	try:
		print(msg)
		i=0
		#while(1)
		while(i<10):
			key = getKey() #receive input key from user
			twist = newVelocity(key) #will update velocity within bounds based on user input
		pub.publish(twist)
		#publish twist to topic cmd_vel
		i=i+1
	except:
		print(exit)
	finally:
		#twist velocities to 0 and publish
		pass




	#publshing twist messages of a que size 10 to cmd_vel
